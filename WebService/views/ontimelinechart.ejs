<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PÃ¼nktlichkeitsstatistik</title>
    <script src="/dist/js/convertions.js"></script>
    <style>
      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        height: 100vh;
        margin: 0;
        overflow: hidden; /* Prevents unwanted scrollbars */
      }

      .controls {
        margin: 10px;
        display: flex;
        gap: 10px;
        align-items: center;
      }
      .controls input,
      .controls select,
      .controls button {
        height: 40px;
        padding: 8px;
        font-size: 16px;
        box-sizing: border-box;
      }
      footer {
        position: fixed;
        z-index: 1000;
        bottom: 0;
        left: 0;
        width: 100%;
        background: #333;
        color: #fff;
        text-align: center;
        height: 30px;
        font-size: 0.8em;
      }
      footer a {
        color: #fff;
      }
    </style>
    <script src="/dist/js/lib/chart.js"></script>
  </head>
  <body>
    <div class="controls">
      <div>
        <label for="timeRangeSelect">Time Range:</label>
        <select id="timeRangeSelect">
          <option value="month">Month</option>
          <option value="week">Week</option>
        </select>
      </div>

      <div>
        <label for="percentageSelect">Select Percentage:</label>
        <select id="percentageSelect">
          <option value="percentage_early">Early</option>
          <option value="percentage_on_time">On Time</option>
          <option value="percentage_late">Late</option>
        </select>
      </div>

      <div>
        <label for="outerNegBound">Outer Negative Bound (minutes):</label>
        <input style="width: 80px" id="outerNegBound" type="number" value="-15" />
      </div>

      <div>
        <label for="lowerInnerBound">Lower Inner Bound (minutes):</label>
        <input style="width: 80px" id="lowerInnerBound" type="number" value="-1" />
      </div>

      <div>
        <label for="upperInnerBound">Upper Inner Bound (minutes):</label>
        <input style="width: 80px" id="upperInnerBound" type="number" value="3" />
      </div>

      <div>
        <label for="outerPosBound">Outer Positive Bound (minutes):</label>
        <input style="width: 80px" id="outerPosBound" type="number" value="15" />
      </div>

      <div>
        <label for="years">Years:</label>
        <input style="width: 80px" id="years" type="number" value="1" min="1" max="10" />
      </div>

      <div>
        <button onclick="fetchAndRenderData()">Fetch & Render Chart</button>
      </div>
    </div>

    <div style="width: 95vw; height: 85vh">
      <canvas id="linechart"></canvas>
    </div>

    <script>
      const ctx = document.getElementById("linechart").getContext("2d");
      let chart;
      let cachedData = []; // Stores the last API response

      document.getElementById("percentageSelect").addEventListener("change", () => {
        if (cachedData.length > 0) {
          updateChart();
        }
      });

      async function fetchAndRenderData() {
        const timeRange = document.getElementById("timeRangeSelect").value;
        const apiUrl = `/api/v1/statistics/delay/percentage/${timeRange}/product?outerNegBound=${document.getElementById("outerNegBound").value*60}&lowerInnerBound=${document.getElementById("lowerInnerBound").value*60}&upperInnerBound=${document.getElementById("upperInnerBound").value*60}&outerPosBound=${document.getElementById("outerPosBound").value*60}&years=${document.getElementById("years").value}`;

        try {
          const response = await fetch(apiUrl);
          if (!response.ok) throw new Error("Failed to fetch data");

          cachedData = await response.json();
          updateChart();
        } catch (error) {
          console.error("Error fetching data:", error);
          alert("Failed to fetch data. Check console for details.");
        }
      }

      function updateChart() {
        const selectedPercentage = document.getElementById("percentageSelect").value;
        const timeRange = document.getElementById("timeRangeSelect").value;

        const datasets = [1, 2, 3].map((produkt) => {
          const filteredData = cachedData.filter((item) => item.produkt === produkt);
          return {
            label: `${convertIntToProduct(produkt)}`,
            data: filteredData.map((item) => parseFloat(item[selectedPercentage])),
            borderColor: getProductColor(convertIntToProduct(produkt)),
            fill: false,
          };
        });

        if (chart) chart.destroy();

        const maxPercentage = Math.max(...datasets.flatMap((dataset) => dataset.data));
        // Calculate y-axis max value based on the max percentage, make it 2x most (So if 0.02% make it most 0.04%)
        const yAxisMax = Math.min(Math.ceil(maxPercentage * 2 * 100) / 100, 100);

        chart = new Chart(ctx, {
          type: "line",
          data: {
            labels: cachedData
              .map((item) => {
                return timeRange === "month" ? new Date(item.month).toLocaleDateString() : `Week ${item.calendar_week}, ${item.year}`;
              })
              .reverse(), // Reverse the order
            datasets: datasets,
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
                max: yAxisMax,
                ticks: {
                  callback: function (value) {
                    return value + "%"; // Append '%' to each tick label
                  },
                },
              },
            },
          },
        });
      }

      function getProductColor(produkt) {
        switch (produkt) {
          case "Bus":
            return "rgb(255, 99, 132)";
          case "Tram":
            return "rgb(54, 162, 235)";
          case "UBahn":
            return "rgb(75, 192, 192)";
          default:
            return "rgb(255, 205, 86)";
        }
      }
    </script>
  </body>
</html>
