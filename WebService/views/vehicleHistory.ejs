<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>History Map</title>
    <link rel="stylesheet" href="/dist/css/ol.css" type="text/css" />
    <script src="/dist/js/convertions.js"></script>
    <script src="/dist/js/ol.js"></script>
    <script src="/dist/js/lib/geolib.js"></script>
    <style>
      html,
      body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
      }
      #map {
        width: 100%;
        height: 100%;
      }
      .slider-container {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        width: 90%;
        background: rgba(0, 0, 0, 0.5);
        padding: 10px;
        border-radius: 10px;
      }
      #vehicle_info p {
        margin: 2px 0;
        font-size: 14px;
      }
      #vehicle_info h4 {
        margin: 2px 0;
        font-weight: bold;
        font-size: 18px;
      }
      #vehicle_info {
        width: 300px;
        white-space: nowrap; 
        overflow: hidden;
        text-overflow: ellipsis;
      }
      #timeSlider {
        width: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <div style="position: absolute; z-index: 2; bottom: 10%; left: 20px; background: white; padding: 10px; border-radius: 5px">
      <div id="vehicle_info"></div>
    </div>
    <div class="slider-container">
      <input type="range" id="timeSlider" min="0" step="1" />
    </div>

    <footer>
        <p>
          <%= appName %>@<%= commitId %>
          <a href="https://github.com/Public-Transport-Nuremberg/VAGStatsTracker">Source</a>
          <a href="/legal/legal">Imprint</a>
        </p>
      </footer>

    <script>
      const pathname = new URL(window.location.href).pathname;
      const parts = pathname.split("/");
      const betriebstag = parts[parts.length - 2];
      const vehicleId = parts[parts.length - 1];
      const apiUrl = `/api/v1/vehicle/history/${betriebstag}/${vehicleId}`;
      let busStops = [];
      let routeCount = new Map();
      let currentBusFeature = null;

      const map = new ol.Map({
        target: "map",
        layers: [new ol.layer.Tile({ source: new ol.source.OSM() })],
        view: new ol.View({ center: ol.proj.fromLonLat([11.0863, 49.4293]), zoom: 14 }),
      });

      const stationSource = new ol.source.Vector();
      const stationLayer = new ol.layer.Vector({
        source: stationSource,
      });

      const routeSource = new ol.source.Vector();
      const routeLayer = new ol.layer.Vector({
        source: routeSource,
        style: (feature) => {
          const count = feature.get("count") || 1;
          const color = `rgb(255, ${255 - count * 20}, ${255 - count * 20})`;
          return new ol.style.Style({ stroke: new ol.style.Stroke({ color, width: 4 }) });
        },
      });

      const busSource = new ol.source.Vector();
      const busLayer = new ol.layer.Vector({ source: busSource });

      map.addLayer(routeLayer);
      map.addLayer(stationLayer);
      map.addLayer(busLayer);

      function updateMap(value) {
        stationSource.clear();
        routeSource.clear();
        busSource.clear();
        routeCount.clear();

        const addedStations = new Set(); // To track added stations

        for (let i = 0; i <= value; i++) {
          const stop = busStops[i];
          if (!stop) break;

          // Prevent duplicate stations from being added
          const stationKey = `${stop.longitude},${stop.latitude}`;
          if (!addedStations.has(stationKey)) {
            addedStations.add(stationKey); // Mark the station as added

            const feature = new ol.Feature({
              geometry: new ol.geom.Point(ol.proj.fromLonLat([stop.longitude, stop.latitude])),
              name: stop.haltestellenname,
            });

            feature.setStyle(
              new ol.style.Style({
                image: new ol.style.Circle({
                  radius: 6,
                  fill: new ol.style.Fill({ color: "blue" }),
                  stroke: new ol.style.Stroke({ color: "white", width: 2 }),
                }),
                text: new ol.style.Text({
                  text: stop.haltestellenname,
                  offsetY: -12,
                  font: "12px Arial",
                  fill: new ol.style.Fill({ color: "black" }),
                  stroke: new ol.style.Stroke({ color: "white", width: 2 }),
                }),
              })
            );

            stationSource.addFeature(feature);
          }

          // Always process route lines (even if the station is a duplicate)
          if (i > 0) {
            const prevStop = busStops[i - 1];
            const routeKey = `${prevStop.haltestellenname}-${stop.haltestellenname}`;
            const count = (routeCount.get(routeKey) || 0) + 1;
            routeCount.set(routeKey, count);

            const lineFeature = new ol.Feature({
              geometry: new ol.geom.LineString([ol.proj.fromLonLat([prevStop.longitude, prevStop.latitude]), ol.proj.fromLonLat([stop.longitude, stop.latitude])]),
              count,
            });

            // Adjust color based on route frequency
            const colorIntensity = Math.max(0, 255 - count * 20); // Prevent negative values
            lineFeature.setStyle(
              new ol.style.Style({
                stroke: new ol.style.Stroke({
                  color: `rgb(255, ${colorIntensity}, ${colorIntensity})`,
                  width: 4,
                }),
              })
            );

            routeSource.addFeature(lineFeature);
          }
        }
      }

      let busMarkerSource = new ol.source.Vector();
      let busMarkerLayer = new ol.layer.Vector({ source: busMarkerSource });
      map.addLayer(busMarkerLayer);

      function initializeSlider() {
        const slider = document.getElementById("timeSlider");
        const sliderContainer = document.querySelector(".slider-container");

        slider.max = busStops.length - 1;
        slider.value = busStops.length - 1;
        slider.addEventListener("input", () => {
          updateMap(parseInt(slider.value));
          updateBusMarker(parseInt(slider.value));
        });
        updateMap(parseInt(slider.value));
        updateBusMarker(parseInt(slider.value));

        // Create labels for linienname and timestamps
        let lastLine = null;
        const labelsContainer = document.createElement("div");
        labelsContainer.style.display = "flex";
        labelsContainer.style.justifyContent = "space-between";
        labelsContainer.style.color = "white";
        labelsContainer.style.padding = "5px 10px";
        labelsContainer.style.fontSize = "14px";

        busStops.forEach((stop, index) => {
          if (index % Math.ceil(busStops.length / 5) === 0) {
            lastLine = stop.linienname;
            const label = document.createElement("span");
            label.textContent = `Uhrzeit: ${new Date(stop.zeitpunkt).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}`;
            label.style.flex = "1";
            label.style.textAlign = "center";
            labelsContainer.appendChild(label);
          }
        });

        sliderContainer.appendChild(labelsContainer);
      }

      function updateBusMarker(index) {
        if (!busStops[index]) return;
        const currentStop = busStops[index];
        const vehicleInfo = document.getElementById("vehicle_info");

        let timeString = "";
        if(currentStop.ankunftszeitsoll) timeString += `<p>Ankunft: ${new Date(currentStop.ankunftszeitsoll).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })} (${currentStop.ankunftszeitversp채tung > 0 ? "+" : ""}${currentStop.ankunftszeitversp채tung})</p>`
        if(currentStop.abfahrtszeitsoll) timeString += `<p>Abfahrt: ${new Date(currentStop.abfahrtszeitsoll).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })} (${currentStop.abfahrtszeitversp채tung > 0 ? "+" : ""}${currentStop.abfahrtszeitversp채tung})</p>`

        vehicleInfo.innerHTML = `
        <h4>Fahrzeug</h4>
        <p>Haltestelle: ${currentStop.haltestellenname}</p>
        <p>Linie: ${currentStop.linienname} (${convertIntToProduct(currentStop.produkt)})</p>
        ${timeString}
        <p>Besetzungsgrad: ${convertIntToBesetzungsgrad(currentStop.besetzungsgrad)}</p>
        `;

        busMarkerSource.clear();

        const currentBusFeature = new ol.Feature({
          geometry: new ol.geom.Point(ol.proj.fromLonLat([currentStop.longitude, currentStop.latitude])),
        });

        currentBusFeature.setStyle(
          new ol.style.Style({
            image: new ol.style.Circle({
              radius: 8,
              fill: new ol.style.Fill({ color: "black" }),
              stroke: new ol.style.Stroke({ color: "white", width: 2 }),
            }),
          })
        );

        busMarkerSource.addFeature(currentBusFeature);
      }

      async function fetchVehicleData() {
        try {
          const response = await fetch(apiUrl);
          if (!response.ok) throw new Error("Failed to fetch data");
          busStops = await response.json();
          if (busStops.length > 0) initializeSlider();
        } catch (error) {
          console.error("Error fetching bus data:", error);
        }
      }

      fetchVehicleData();
    </script>
  </body>
</html>
