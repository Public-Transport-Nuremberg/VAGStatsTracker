<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>VGN Heatmap</title>
    <script src="/dist/js/ol.js"></script>
    <script src="/dist/js/lib/geolib.js" type="text/javascript"></script>
    <link rel="stylesheet" href="/dist/css/ol.css">
    <style>
        .map {
            height: 100vh; /* 100% of the viewport height */
            width: 100vw; /* 100% of the viewport width */
            position: fixed; /* This will position the map relative to the viewport */
            top: 0;
            left: 0;
            z-index: 1; /* Make sure this is behind any other positioned elements */
        }
    </style>
</head>
<body>
    <div id="map" class="map"></div>

    <script>
        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            view: new ol.View({
                center: ol.proj.fromLonLat([11.1131575166207, 49.487582179245]),
                zoom: 13
            })
        });

        var heatmapLayer = new ol.layer.Heatmap({
            source: new ol.source.Vector(),
            blur: parseInt(15, 10),
            radius: parseInt(25, 10),
        });

        map.addLayer(heatmapLayer);

        fetch('http://localhost/api/v1/heatmap')
            .then(function(response) {
                return response.json();
            })
            .then(function(data) {
                var minDelayLog = Math.log(Math.min(...data.map(item => Math.max(item.avg_delay, 1))));
                var maxDelayLog = Math.log(Math.max(...data.map(item => Math.max(item.avg_delay, 1))));
                var features = data.map(function(point) {
                    var delayLog = Math.log(Math.max(point.avg_delay, 1));
                    var normalizedWeight = (delayLog - minDelayLog) / (maxDelayLog - minDelayLog);
                    var feature = new ol.Feature({
                        geometry: new ol.geom.Point(ol.proj.fromLonLat([point.longitude, point.latitude])),
                        weight: normalizedWeight * normalizedWeight * normalizedWeight
                    });
                    return feature;
                });

                heatmapLayer.getSource().addFeatures(features);
            })
            .catch(function(error) {
                console.log('Error fetching or parsing data:', error);
            });
    </script>
</body>
</html>
